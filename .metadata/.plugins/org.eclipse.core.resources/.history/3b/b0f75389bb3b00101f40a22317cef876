package com.ServiceImpl;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.entities.Rating;
import com.entities.User;
import com.exception.ResourceNotFoundException;
import com.repository.UserRepository;
import com.services.UserService;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    UserRepository userRepo;
    
    @Autowired
    private RestTemplate restTemplate;
    
    private static final Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);


    @Override
    public User saveUser(User user) {
    	String randomUserId=UUID.randomUUID().toString();
    	user.setUserId(randomUserId);
        return userRepo.save(user);
    }

    @Override
    public List<User> getAllUser() {
        return userRepo.findAll();
    }

    @Override
    public User getUser(String userId) {
        User user= userRepo.findById(userId)
            .orElseThrow(() -> new ResourceNotFoundException("User with given id is not found on server: " + userId));
        //fetch rating of the above user from Rating Service
       ArrayList<Rating> forObject= restTemplate.getForObject("http://localhost:8083/ratings/users/" +user.getUserId(), ArrayList.class);
        
       logger.info("{}",forObject);
       return user;
    
    }

    @Override
    public User updateUser(String userId, User user) {
        // Step 1: Existing user check
        User existingUser = userRepo.findById(userId)
            .orElseThrow(() -> new ResourceNotFoundException("Cannot update. User not found with id: " + userId));

        // Step 2: Update fields
        existingUser.setName(user.getName());
        existingUser.setEmail(user.getEmail());
        existingUser.setAbout(user.getAbout());

        // Step 3: Save and return
        return userRepo.save(existingUser);
    }

    @Override
    public void deleteUser(String userId) {
        User user = userRepo.findById(userId)
            .orElseThrow(() -> new ResourceNotFoundException("Cannot delete. User not found with id: " + userId));
        
        userRepo.delete(user);
    }
}
